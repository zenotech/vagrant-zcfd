#!/bin/bash

# Terminate script on first error
set -e


BUILD_DEBUG="Release"
BUILD_LOCAL="true"
BUILD_CUDA="true"
BUILD_INTEL="true"
verbose="false"
MAKE_TARGET=""
MAKE_PARALLEL="6"
MAKE_FAST="false"
BUILD_OFFLINE="false"
BUILD_IMPI="false"
BUILD_SOLVERS="all"
BUILD_PHI="false"
UPDATE_ZCFD="false"
BUILD_CUDA_ONLY="false"

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Usage info
show_help() {
cat << EOF
Usage: ${0##*/} [-h] [-a ARCH] ...
Compile zCFD creating an installation tar file

    -h          display this help and exit
    -a ARCH     Base architecture.
    -l          Compile local zCFD folder - default
    -r          Compile remote copy
    -d          Compile debug version
    -c          Compile for cpu only
    -j 12       Compile in parallel
    -t TARGET   Compile specific target
    -f          Compile zCFD fast (ignores dependencies)
    -g          Compile using gcc
    -o          Compile offline (no online access to Git repository)
    -u          Git pull zCFD before compiling
    --impi      Compile using Intel MPI
    --phi       Compile for Intel Xeon Phi
    --solvers   Compile specific solvers (e.g. --solvers="euler viscous rans les dgmenterdes")
EOF
}

while [ "$#" -gt 0 ]; do
    case $1 in
        -h|-\?|--help)   # Call a "show_help" function to display a synopsis, then exit.
            show_help
            exit
            ;;
        -a|--arch )       # Takes an option argument, ensuring it has been specified.
            if [ "$#" -gt 1 ]; then
                ZTARGET=$2
                shift 2
                continue
            else
                echo 'ERROR: Must specify a non-empty "--arch ARCH" argument.' >&2
                exit 1
            fi
            ;;
        --arch=?*)
            ZTARGET=${1#*=} # Delete everything up to "=" and assign the remainder.
            ;;
        --arch=)         # Handle the case of an empty --file=
            echo 'ERROR: Must specify a non-empty "--arch ARCH" argument.' >&2
            exit 1
            ;;
        --solvers=?*)
            BUILD_SOLVERS=${1#*=} # Delete everything up to "=" and assign the remainder.
            ;;
        -j)
            if [ "$#" -gt 1 ]; then
                MAKE_PARALLEL=$2
                shift 2
                continue
            else
                echo 'ERROR: Must specify a non-empty "-j 12" argument.' >&2
                exit 1
            fi
            ;;
        -v|--verbose)
            #verbose=$((verbose + 1)) # Each -v argument adds 1 to verbosity.
            verbose="true"
            ;;
        -l|--local)
            BUILD_LOCAL="true"
            ;;
        -r|--remote)
            BUILD_LOCAL="false"
            ;;
        -d|--debug)
            BUILD_DEBUG="Debug"
            ;;
        -c|--cpuonly)
            BUILD_CUDA="false"
            ;;
        --cudaonly)
            BUILD_CUDA_ONLY="true"
            ;;
        -g|--gcconly)
            BUILD_INTEL="false"
            ;;
        -t|--target)
            MAKE_TARGET=$2
            ;;
        -f|--fast)
            MAKE_FAST="true"
            ;;
        -o|--offline)
            BUILD_OFFLINE="true"
            ;;
        --impi)
            BUILD_IMPI="true"
            ;;
        --phi)
            BUILD_PHI="true"
            ;;
        -u)
            UPDATE_ZCFD="true"
            ;;
        --)              # End of all options.
            shift
            break
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)               # Default case: If no more options then break out of the loop.
            break
    esac

    shift
done

#echo $BUILD_SOLVERS

#echo $ZTARGET
#echo $BUILD_LOCAL
#echo $BUILD_DEBUG
#echo $MAKE_PARALLEL
#exit 0

function build_success
{
  # Send a pushover.net notification
  #curl -s --form-string "token=aY8kBmCv4VECuPLST79CSouUQL5xFw" --form-string "user=uNsCqiK4snpgpN4qkdken8v2RP5fwh" --form-string "message=Package: #${ZCFD_PACKAGE_NAME} build complete" https://api.pushover.net/1/messages.json

  # Check if GITTER_TOKEN is set
if [[ -n ${GITTER_TOKEN} ]] ; then
python << END
import gitterpy
gitter_token = "${GITTER_TOKEN}"
gitter = gitterpy.Gitter(gitter_token)
gitter.sendMessage('zenotech','Package: ${ZCFD_PACKAGE_NAME} build complete on: ${HOSTNAME}')
END
fi

  echo 'Build zCFD - Complete'
}

function build_failed
{
  # Send a pushover.net notification
  #curl -s --form-string "token=aY8kBmCv4VECuPLST79CSouUQL5xFw" --form-string "user=uNsCqiK4snpgpN4qkdken8v2RP5fwh" --form-string "message=Package: #${ZCFD_PACKAGE_NAME} build failed" https://api.pushover.net/1/messages.json
if [[ -n ${GITTER_TOKEN} ]] ; then
python << END
import gitterpy
gitter_token = "${GITTER_TOKEN}"
gitter = gitterpy.Gitter(gitter_token)
gitter.sendMessage('zenotech','Package: ${ZCFD_PACKAGE_NAME} build failed on: ${HOSTNAME}')
END
fi

  echo 'Build zCFD - Failed'
}

trap build_failed EXIT

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

printr (){
  printf "${RED}${@}${NC}\n"
}
printb (){
  printf "${BLUE}${@}${NC}\n"
}

UNAME=`uname`

printr "Building zCFD on ${UNAME}"

mkdir -p BUILD
pushd BUILD

if [ ! "BUILD_FAST" == "true" ]; then

if [ "$BUILD_LOCAL" == "true" ] ; then
  if [ ! -d zCFDSuperBuild ] ; then
    ln -sf $SCRIPT_DIR/../../zCFDSuperBuild zCFDSuperBuild
  fi
fi

# Clone the repo
if [ "$BUILD_OFFLINE" == "false" ] ; then
  if [ ! -e "zCFDSuperBuild" ] ; then
    git clone git@github.com:zenotech/zCFDSuperBuild.git
  fi

  if [ "$UPDATE_ZCFD" == "true" ]; then
    pushd zCFD
    git pull
    popd
    pushd zCFDSuperBuild
    git pull
    popd
  fi

  # Checkout branch
  pushd zCFDSuperBuild
  git checkout poly
  popd
fi

fi

# Get GIT BRANCH info
pushd zCFDSuperBuild
GIT_BRANCH=`git rev-parse --abbrev-ref HEAD`
popd
echo "branch: ${GIT_BRANCH}"

#git rev-parse --abbrev-ref HEAD | sed 's/^.*[^0-9]\([0-9]*\.[0-9]*\.[0-9]*\).*$/\1/'

CMAKE_EXTRA_ARGS=""
if [ "$BUILD_LOCAL" == "true" ] ; then
  if [ ! -d zCFD ] ; then
    ln -s $SCRIPT_DIR/../../zCFD zCFD
  fi
  tar zcf zCFD.tar.gz zCFD/*
  BUILD_URL=`pwd`/zCFD.tar.gz
  BUILD_MD5=`md5sum $BUILD_URL | cut -d \  -f 1`

  CMAKE_EXTRA_ARGS="-DzCFD_FROM_GIT:BOOL=OFF \
      -DzCFD_URL:STRING=${BUILD_URL} \
      -DzCFD_URL_MD5:STRING=${BUILD_MD5}"
fi


ZCFD_EXTRA_ARGS="-DOPT_ARCH:STRING=HOST"
if [ -n "$ZTARGET" ]; then
  echo $ZTARGET
  if [ "$ZTARGET" == "avx" ]; then
    CPU_FLAG='avx'
    ZCFD_EXTRA_ARGS="-DOPT_ARCH:STRING=AVX"
  elif [ "$ZTARGET" == "sse" ]; then
    CPU_FLAG='sse'
    ZCFD_EXTRA_ARGS="-DOPT_ARCH:STRING=SSE"
  elif [ "$ZTARGET" == "host" ]; then
    CPU_FLAG='host'
    ZCFD_EXTRA_ARGS="-DOPT_ARCH:STRING=HOST"
  else
    echo "Invalid architecture $ZTARGET"
    exit 1
  fi
else
  printr "Attempting to autodetect architecture type"
  CPU_FLAG=`(cat /proc/cpuinfo | grep flags | grep -q avx && echo $?) || true`
  if [ "$CPU_FLAG" == "0" ] ; then
    # AVX
    CPU_FLAG='avx'
    ZCFD_EXTRA_ARGS="-DOPT_ARCH:STRING=AVX"
    echo "Detected AVX"
  else
    # SSE
    CPU_FLAG='sse'
    ZCFD_EXTRA_ARGS="-DOPT_ARCH:STRING=SSE"
    echo "Defaulting to SSE"
  fi
fi

ZCFD_EXTRA_ARGS="-DBUILD_FV:BOOL=ON;$ZCFD_EXTRA_ARGS"
ZCFD_EXTRA_ARGS="-DBUILD_DG:BOOL=ON;$ZCFD_EXTRA_ARGS"
ZCFD_EXTRA_ARGS="-DBUILD_PRECOND:BOOL=ON;$ZCFD_EXTRA_ARGS"

BUILD_EULER="OFF"
BUILD_VISCOUS="OFF"
BUILD_RANS="OFF"
BUILD_LES="OFF"
BUILD_DGMENTER_DES="OFF"
BUILD_DES="OFF"
for s in $BUILD_SOLVERS
do
  if [[ "$s" == "euler" || "$s" == "all" ]]; then
    BUILD_EULER="ON"
  fi
  if [[ "$s" == "viscous" || "$s" == "all" ]]; then
    BUILD_VISCOUS="ON"
  fi
  if [[ "$s" == "rans" || "$s" == "all" ]]; then
    BUILD_RANS="ON"
  fi
  if [[ "$s" == "dgmenterdes" || "$s" == "all" ]]; then
    BUILD_DGMENTER_DES="ON"
  fi
  if [[ "$s" == "les" || "$s" == "all" ]]; then
    BUILD_LES="ON"
  fi
  if [[ "$s" == "des" || "$s" == "all" ]]; then
    BUILD_DES="ON"
  fi
done

ZCFD_EXTRA_ARGS="-DBUILD_EULER:BOOL=$BUILD_EULER;$ZCFD_EXTRA_ARGS"
ZCFD_EXTRA_ARGS="-DBUILD_VISCOUS:BOOL=$BUILD_VISCOUS;$ZCFD_EXTRA_ARGS"
ZCFD_EXTRA_ARGS="-DBUILD_MENTER:BOOL=$BUILD_RANS;$ZCFD_EXTRA_ARGS"
ZCFD_EXTRA_ARGS="-DBUILD_MENTER_DES:BOOL=$BUILD_DES;$ZCFD_EXTRA_ARGS"
ZCFD_EXTRA_ARGS="-DBUILD_MENTER_DDES:BOOL=$BUILD_DES;$ZCFD_EXTRA_ARGS"
ZCFD_EXTRA_ARGS="-DBUILD_MENTER_SAS:BOOL=$BUILD_LES;$ZCFD_EXTRA_ARGS"
ZCFD_EXTRA_ARGS="-DBUILD_LES_WALE:BOOL=$BUILD_LES;$ZCFD_EXTRA_ARGS"
ZCFD_EXTRA_ARGS="-DBUILD_DGMENTER_DES:BOOL=$BUILD_DGMENTER_DES;$ZCFD_EXTRA_ARGS"

#echo $ZCFD_EXTRA_ARGS

ZCFD_EXTRA_ARGS="-DCMAKE_BUILD_TYPE:STRING=${BUILD_DEBUG};-DCUDA_HOST_COMPILER:STRING=`which g++`;-DCUDA_PROPAGATE_HOST_FLAGS:BOOL=OFF;$ZCFD_EXTRA_ARGS"

# For release strip files
if [ "${BUILD_DEBUG}" == "Release" ]; then
     CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DCPACK_STRIP_FILES:BOOL=ON"
fi

if [ "$GIT_BRANCH" != "HEAD" ]; then
  CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -Dzcfd_version_suffix:STRING=${GIT_BRANCH}"
  ZCFD_EXTRA_ARGS="-DVERSION_SUFFIX:STRING=${GIT_BRANCH};$ZCFD_EXTRA_ARGS"
fi

CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DPV_MAKE_NCPUS:STRING=${MAKE_PARALLEL}"

ZCFD_PACKAGE_NAME="zCFD-${CPU_FLAG}"

# Check gcc
GCC_COMPILER=`type -p gcc || true`

# Check for presence of CUDA compiler
if [ "$BUILD_CUDA" == "true" ]; then
  CUDA_COMPILER=`type -p nvcc || true`
  if [ "${UNAME}" == "Darwin" ] ; then
    CUDA_COMPILER=`type -p /usr/local/cuda/bin/nvcc || true`
  fi

  CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DENABLE_zcfdcuda:BOOL=ON"
  if [ "${BUILD_CUDA_ONLY}" == "true" ]; then
    ZCFD_PACKAGE_NAME="zCFD-cuda-$CPU_FLAG"
  fi
else
  CUDA_COMPILER=
fi

if [ "${BUILD_CUDA_ONLY}" == "true" ]; then
  CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DENABLE_zcfd:BOOL=OFF"
else
  CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DENABLE_zcfd:BOOL=ON"
fi

# build for fermi and kepler
ZCFD_EXTRA_ARGS="-DBUILD_ARCH_20:BOOL=ON;-DBUILD_ARCH_30:BOOL=ON;$ZCFD_EXTRA_ARGS"
ZCFD_EXTRA_ARGS="-DBUILD_ARCH_35:BOOL=ON;-DBUILD_ARCH_50:BOOL=ON;$ZCFD_EXTRA_ARGS"

# Check for presence of Intel compiler
INTEL_COMPILER=`type -p icc || true`
if [ -f "$INTEL_COMPILER" ]; then
  INTEL_VERSION=`icc -dumpversion`
  if [ "$BUILD_INTEL" == "true" ]; then
    ZCFD_PACKAGE_NAME="zCFD-icc-$CPU_FLAG"
    CMAKE_EXTRA_ARGS="-DINTEL_CC:BOOL=ON;$CMAKE_EXTRA_ARGS"
    ZCFD_EXTRA_ARGS="-DINTEL_CC:BOOL=ON;$ZCFD_EXTRA_ARGS"

    if [ "$BUILD_PHI" == "true" ]; then
      # Should we build phi support
      MIC_INFO=`type -p micinfo || true`
      if [ -f "$MIC_INFO" ]; then
        ZCFD_PACKAGE_NAME="zCFD-icc-phi-$CPU_FLAG"
        ZCFD_EXTRA_ARGS="-DINTEL_CC:BOOL=ON;-DBUILD_PHI:BOOL=ON;$ZCFD_EXTRA_ARGS"
      fi
    fi
    CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DBOOST_INTEL_TOOLSET:BOOL=ON"
  fi
  if [ "$BUILD_IMPI" == "true" ]; then
    ZCFD_PACKAGE_NAME="${ZCFD_PACKAGE_NAME}-impi"
    CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DUSE_SYSTEM_mpi:BOOL=ON -DMPI_VENDOR:STRING=INTELMPI"
  fi
else
  INTEL_COMPILER=
  INTEL_VERSION=
fi

if [ "${BUILD_DEBUG}" == "Debug" ]; then
  ZCFD_PACKAGE_NAME="${ZCFD_PACKAGE_NAME}-debug"
fi

# Redirect output to a file
logfile=${ZCFD_PACKAGE_NAME}.log
echo "Redirecting output to: $logfile"
exec > >(tee $logfile)
exec 2>&1

#exec > $logfile 2>&1

# Build directory
BUILD_DIR=${ZCFD_PACKAGE_NAME}_build

# Build directory
mkdir -p ${BUILD_DIR}

# Build
pushd ${BUILD_DIR}
if [ -f CMakeCache.txt ] ; then
  rm CMakeCache.txt
fi

PREFIX=`pwd`/install
export PATH=$PREFIX/bin:$PATH
export LD_LIBRARY_PATH=$PREFIX/lib:$LD_LIBRARY_PATH
export BOOST_ROOT=$PREFIX
export BZIP2_INCLUDE=`pwd`/install/include
export BZIP2_LIBPATH=`pwd`/install/lib


CMAKE_EXE=`type -p cmake || true`
if [ ! -f "$CMAKE_EXE" ]; then
  CMAKE_EXE=cmake28
fi

if [ "${UNAME}" == "Darwin" ] ; then
  CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DCMAKE_OSX_DEPLOYMENT_TARGET=10.11"
  PV_EXTRA_ARGS="-DCMAKE_BUILD_TYPE:STRING=${BUILD_DEBUG};\
  -DPYTHON_EXECUTABLE:FILEPATH=${PREFIX}/bin/python;\
  -DVTK_XDMF_USE_MPI:BOOL=ON;\
  -DVTK_USE_SYSTEM_HDF5:BOOL=ON;\
  -DXDMF_BUILD_MPI:BOOL=ON;\
  -DPARAVIEW_DO_UNIX_STYLE_INSTALLS:BOOL=ON;-DPARAVIEW_BUILD_QT_GUI:BOOL=OFF"
  ZCFD_EXTRA_ARGS="-DDISABLE_LM:BOOL=ON;$ZCFD_EXTRA_ARGS"

  if [ "${MAKE_FAST}" == "true" ] ; then
    CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DZCFD_FAST:BOOL=ON"
  fi
elif [[ -n "$CRAYOS_VERSION" ]]; then
  #statements
  # For Linux
  PV_EXTRA_ARGS="-DCMAKE_BUILD_TYPE:STRING=${BUILD_DEBUG};\
                -DPYTHON_EXECUTABLE:FILEPATH=${PREFIX}/bin/python;\
                -DVTK_OPENGL_HAS_OSMESA:BOOL=ON;-DVTK_XDMF_USE_MPI:BOOL=ON;\
                -DVTK_USE_SYSTEM_HDF5:BOOL=ON;-DXDMF_BUILD_MPI:BOOL=ON;\
                -DOSMESA_INCLUDE_DIR:PATH=${PREFIX}/include;\
                -DOSMESA_LIBRARY:FILEPATH=${PREFIX}/lib/libOSMesa.so;\
                -DOPENGL_INCLUDE_DIR:PATH=${PREFIX}/include;\
                -DOPENGL_gl_LIBRARY:FILEPATH="";-DOPENGL_glu_LIBRARY:FILEPATH=${PREFIX}/lib/libGLU.so;\
                -DOPENGL_xmesa_INCLUDE_DIR:PATH="";-DVTK_USE_X:BOOL=OFF;-DPARAVIEW_BUILD_QT_GUI:BOOL=OFF"

  CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DCMAKE_C_COMPILER=${CRAYPE_DIR}/bin/cc \
                    -DCMAKE_CXX_COMPILER=${CRAYPE_DIR}/bin/CC \
                    -DCMAKE_Fortran_COMPILER=${CRAYPE_DIR}/bin/ftn \
                    -DUSE_SYSTEM_bzip2:BOOL=ON -DUSE_SYSTEM_freetype:BOOL=ON \
                    -DUSE_SYSTEM_lbxml2:BOOL=ON -DUSE_SYSTEM_png:BOOL=ON -DUSE_SYSTEM_zlib:BOOL=ON \
                    -DUSE_SYSTEM_hdf5:BOOL=ON -DUSE_SYSTEM_lapack:BOOL=ON -DUSE_SYSTEM_mpi:BOOL=ON -DMPI_VENDOR:STRING=CRAYMPI\
                    -DBLAS_LIBRARIES:FILEPATH=${CRAY_LIBSCI_PREFIX_DIR}/lib/libsci_gnu.so \
                    -DLAPACK_LIBRARIES:FILEPATH=${CRAY_LIBSCI_PREFIX_DIR}/lib/libsci_gnu.so"
  if [ "${MAKE_FAST}" == "true" ] ; then
    CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DZCFD_FAST:BOOL=ON"
    ZCFD_EXTRA_ARGS="-DBUILD_FAST:BOOL=ON;$ZCFD_EXTRA_ARGS"
  fi
else
  # For Linux
  PV_EXTRA_ARGS="-DCMAKE_BUILD_TYPE:STRING=${BUILD_DEBUG};\
                -DPYTHON_EXECUTABLE:FILEPATH=${PREFIX}/bin/python;\
                -DVTK_OPENGL_HAS_OSMESA:BOOL=ON;-DVTK_XDMF_USE_MPI:BOOL=ON;\
                -DVTK_USE_SYSTEM_HDF5:BOOL=ON;-DXDMF_BUILD_MPI:BOOL=ON;\
                -DOSMESA_INCLUDE_DIR:PATH=${PREFIX}/include;\
                -DOSMESA_LIBRARY:FILEPATH=${PREFIX}/lib/libOSMesa.so;\
                -DOPENGL_INCLUDE_DIR:PATH=${PREFIX}/include;\
                -DOPENGL_gl_LIBRARY:FILEPATH="";-DOPENGL_glu_LIBRARY:FILEPATH=${PREFIX}/lib/libGLU.so;\
                -DOPENGL_xmesa_INCLUDE_DIR:PATH="";-DVTK_USE_X:BOOL=OFF;-DPARAVIEW_BUILD_QT_GUI:BOOL=OFF"

  if [ "${MAKE_FAST}" == "true" ] ; then
    CMAKE_EXTRA_ARGS="${CMAKE_EXTRA_ARGS} -DZCFD_FAST:BOOL=ON"
    ZCFD_EXTRA_ARGS="-DBUILD_FAST:BOOL=ON;$ZCFD_EXTRA_ARGS"
  fi

fi

$CMAKE_EXE  -DCMAKE_BUILD_TYPE:STRING:=${BUILD_DEBUG} \
      -DPV_EXTRA_CMAKE_ARGS:STRING="${PV_EXTRA_ARGS}" \
      -DCPACK_PACKAGE_NAME:STRING=${ZCFD_PACKAGE_NAME} \
      -DENABLE_ffmpeg:BOOL=ON \
      -DENABLE_osmesa:BOOL=ON \
      -DZCFD_EXTRA_CMAKE_ARGS:STRING="${ZCFD_EXTRA_ARGS}" \
      ${CMAKE_EXTRA_ARGS} \
      ../zCFDSuperBuild

if [ "${verbose}" == "true" ] ; then
  make -j1 VERBOSE=true $MAKE_TARGET
else
  make -j1 $MAKE_TARGET
fi

if [ "${MAKE_FAST}" == "false" ] ; then

  # Install setuptools
  wget --no-check-certificate https://bootstrap.pypa.io/ez_setup.py -O - | install/bin/python
  # Install pip
  #wget --no-check-certificate https://bootstrap.pypa.io/get-pip.py -O - | install/bin/python
  if [ ! -f pip-7.1.2.tar.gz ]; then
    wget --no-check-certificate https://pypi.python.org/packages/source/p/pip/pip-7.1.2.tar.gz#md5=3823d2343d9f3aaab21cf9c917710196
  fi
  tar xvf pip-7.1.2.tar.gz
  pushd pip-7.1.2
  ../install/bin/python setup.py install
  popd

  # Upgrade pip
  install/bin/python install/bin/pip install --upgrade --index-url=http://pypi.python.org/simple/ --trusted-host pypi.python.org pip

  # Install yolk
  install/bin/python install/bin/pip install --upgrade --index-url=http://pypi.python.org/simple/ --trusted-host pypi.python.org yolk

  # Install gitterpy
  install/bin/python install/bin/pip install --upgrade https://github.com/graycatlabs/gitterpy/zipball/master

  # Install mpi4py
  #./install/bin/python setup.py build --mpicc=cc --mpicxx=CC --mpif95=ftn

  # Install numpy
#export CC=cc
#export CXX=CC
#export FC=ftn

  # Install requirements
  install/bin/python install/bin/pip install --upgrade --index-url=http://pypi.python.org/simple/ --trusted-host pypi.python.org -r ../zCFDSuperBuild/requirements.txt
  # Force reinstall
  install/bin/python install/bin/pip install --upgrade --no-deps --force-reinstall --index-url=http://pypi.python.org/simple/ --trusted-host pypi.python.org -r ../zCFDSuperBuild/requirements.txt
  # Install notebook
  install/bin/python install/bin/pip install --upgrade --index-url=http://pypi.python.org/simple/ --trusted-host pypi.python.org -r ../zCFDSuperBuild/notebook-requirements.txt

  install/bin/python install/bin/pip install --upgrade --index-url=http://pypi.python.org/simple/ --trusted-host pypi.python.org jupyter

  # If CUDA present install pycuda
  if [ -f "$CUDA_COMPILER" ]; then
    install/bin/python install/bin/pip install pycuda
    #  Need to copy CUDA libraries into lib - this is permitted under the NVIDIA CUDA EULA
    cp -r "$( dirname "$CUDA_COMPILER" )"/../lib64/* install/lib
  fi

  # Need to fix up scripts in bin that use python
  P_SCRIPTS=`grep python install/bin/* | grep '#!' | cut -d : -f 1`
  for P in $P_SCRIPTS; do
    echo "Fixing python path in $P"
    sed -i.tmp -e "s/\#\!\/.*/\#\!\/usr\/bin\/env python/" $P
    rm -f "${P}.tmp"
  done

  # Function to install intel compiler redistributable
  function install_intel2016
  {
    stub=$1
    release=$2
    mpi_redist=l_mpi-rt_p_5.1.3.223
    if [ ! -f ${stub}.tgz ]; then
      wget http://packages.zenotech.com/${stub}.tgz
    fi
    tar xf ${stub}.tgz
    pushd ${stub}
    ./install.sh --eula --install-path ../install/intel
    popd
    # Fix up as Intel has changed install path
    rm -rf install/intel/compiler/lib/intel64
    rm -rf install/intel/compiler
    ln -sF compilers_and_libraries_${release}/linux/compiler install/intel/compiler
    ln -sF intel64_lin install/intel/compiler/lib/intel64
    mkdir -p install/intel/mkl/lib/intel64
    cp -rfL "$( dirname "$INTEL_COMPILER" )"/../../mkl/lib/intel64 install/intel/mkl/lib/intel64
    if [ ! -f ${mpi_redist}.tgz ] ; then
	wget http://packages.zenotech.com/${mpi_redist}.tgz 
    fi
    tar xf ${mpi_redist}.tgz
    pushd ${mpi_redist}
    cat << EOF > silent.cfg
ACCEPT_EULA=accept
CONTINUE_WITH_OPTIONAL_ERROR=yes
PSET_INSTALL_DIR=$PWD/../install/intel
CONTINUE_WITH_INSTALLDIR_OVERWRITE=no
PSET_MODE=install
PHONEHOME_SEND_USAGE_DATA=yes
COMPONENTS=;intel-comp-l-all-vars__noarch;intel-mpi-rt-core__x86_64;intel-mpi-rt-psxe__x86_64;intel-psxe-common__noarch;intel-psxe-doc__noarch;intel-compxe-pset
EOF
    rm -f ${HOME}/intel/intel_sdp_products.db 
    ./install.sh --silent silent.cfg --user-mode --ignore-cpu
    popd
  }

  if [ -f "$INTEL_COMPILER" ]; then
    # https://software.intel.com/en-us/articles/intelr-composer-redistributable-libraries-by-version
    if [ "${UNAME}" != "Darwin" ] ; then
      # Always install the intel compiler redistributable libraries
      if [ "$INTEL_VERSION" == "16.0.1" ]; then
        install_intel2016 l_comp_lib_2016.1.150_comp.cpp_redist 2016.1.150
      elif [ "$INTEL_VERSION" == "16.0.2" ]; then
        install_intel2016 l_comp_lib_2016.2.181_comp.cpp_redist 2016.2.181
      elif [ "$INTEL_VERSION" == "16.0.3" ]; then
        install_intel2016 l_comp_lib_2016.3.210_comp.cpp_redist 2016.3.210
      else
        echo "Intel Compiler Version not recognised - missing redistributable library"
      fi
    fi
  fi

  # Create empty directory as CPACK expects a directory
  mkdir -p install/intel

  # Create empty directory as CPACK expects a directory
  mkdir -p install/lic

  CPACK_EXE=`type -p cpack || true`
  if [ ! -f "$CPACK_EXE" ]; then
    CPACK_EXE=cpack28
  fi

  # Package
  #$CPACK_EXE -G TGZ --verbose # --debug --verbose
  $CPACK_EXE -G TGZ

  popd
  popd
  cp BUILD/${BUILD_DIR}/${ZCFD_PACKAGE_NAME}*.tar.gz .
  # Delete cpack directories
  rm -rf BUILD/${BUILD_DIR}/_CPack_Packages
  rm -f BUILD/${BUILD_DIR}/${ZCFD_PACKAGE_NAME}*.tar.gz

fi

# Clear exit trap
trap '' EXIT
build_success

exit 0

